///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Console language standard library:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//  Binds a key so that it will toggle a variable.
//  Example: bindvar 9 thirdperson
bindvar = [
    if (>= $numargs 3) [
        bind $arg1 [if (@arg3) [togglevar @@arg2]]
    ][
        bind $arg1 [togglevar @arg2]
    ]
]
bindvarquiet = [
    bind $arg1 [set @arg2 (= $@arg2 0)]
]

//  Same as above, but only binds for edit mode.
editbindvar = [
    if (>= $numargs 3) [
        editbind $arg1 [if (@arg3) [togglevar @@arg2]]
    ][
        editbind $arg1 [togglevar @arg2]
    ]
]
editbindvarquiet = [
    editbind $arg1 [set @arg2 (= $@arg2 0)]
]

//  Binds a key so that it will set a modifier while held down.
bindmod = [
    bind $arg1 [set @arg2 1; onrelease [set @@arg2 0]]
]

//  Same as above, but only binds for edit mode.
editbindmod = [
    editbind $arg1 [set @arg2 1; onrelease [set @@arg2 0]]
]


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
colorvectoint = [
    // ARGS 1: [LIST]  Containing 3 floats, RGB, values 0.0 to 1.0.

    if (&& (= $numargs 1) (= (listlen $arg1) 3)) [
        _R = (<< (+ 0 (round (*f (at $arg1 0) 255))) 16)
        _G = (<< (+ 0 (round (*f (at $arg1 1) 255)))  8)
        _B =     (+ 0 (round (*f (at $arg1 2) 255)))
        result (+ $_R (+ $_G $_B))
    ][
        result 0
    ]
]


_FOV_GetHorzFromVert = [result (*f 2.0 (atan (*f (tan (divf $arg1 2.0)) (divf $scr_w $scr_h)) ))] // FovHorz = 2 ∗ atan( tan(FovVert / 2) ∗ (View_W / View_H) )
_FOV_GetVertFromHorz = [result (*f 2.0 (atan (*f (tan (divf $fov  2.0)) (divf $scr_h $scr_w)) ))] // FovVert = 2 ∗ atan( tan(FovHorz / 2) ∗ (View_H / View_W) )
fovh = [
    if (> $numargs 0) [fov = $arg1]
    echo "^f~fov vertical   =" (_FOV_GetVertFromHorz)
    echo "^f~fov horizontal =" $fov
]
fovv = [
    if (> $numargs 0) [fov (round (_FOV_GetHorzFromVert $arg1))]
    echo "^f~fov vertical   =" (_FOV_GetVertFromHorz)
    echo "^f~fov horizontal =" $fov
]


+fround = [round (+f $arg1 $arg2) (absf $arg2)]


listswap = [
    // ARGS 1: [LIST]
    //      2: IndexA   Indexes are ZeroInclusive.
    //      3: IndexB
    _ListLen = (listlen $arg1) // listlen is NOT ZeroInclusive.
    if     (|| (< $arg2 0) (>= $arg2 $_ListLen)) [echo "^f3ERROR -- listswap: IndexA is out of range."; result $arg1][
        if (|| (< $arg3 0) (>= $arg3 $_ListLen)) [echo "^f3ERROR -- listswap: IndexB is out of range."; result $arg1][
            _Result = $arg1
            _HoldMe = (escape (at $_Result $arg2))
            _Result = (listsplice $_Result (escape (at $_Result $arg3)) $arg2 1)
            _Result = (listsplice $_Result             $_HoldMe         $arg3 1)
            result $_Result
        ]
    ]
]
listshuffle = [
    // ARGS 1: [LIST]
    if (&& (= $numargs 1) (> (listlen $arg1) 1)) [
        _Result = $arg1
        _ListLen = (listlen $_Result) // listlen is NOT ZeroInclusive.
        loop i (- $_ListLen 1) [ // LoopEnd is NOT ZeroInclusive.  No need to swap last index.
            // Swap current item with any item AFTER it, including itself:
            _Result = (listswap $_Result $i (rnd $_ListLen $i))  //  rnd MAX MIN      MAX is "<" instead of "<=".
        ]
        result $_Result
    ][
        result 0
    ]
]


loadsky = [ // Legacy-ish Alias.
    skybox $arg1
    if (> $numargs 1) [ spinsky $arg2 ] [ if (!=f $spinsky 0.0) [spinsky 0.0] ]
]


//  Creates a macro whose body is a format string.
//  Example: macro greet [ say Hi, %1! ]
macro = [
    $arg1 = (concat [format [@@arg2]] (loopconcat i $numargs [concatword " $arg" (+ $i 1)]))
]


mapmsg = [ maptitle $arg1 ] // Legacy Alias.


quine = [ echo (format "quine = [%1]" $quine) ]


soundbufferlengthtomillis = [
    if $stereo [
        result (divf (divf $soundbufferlen 2) $soundfreq)
    ][
        result (divf       $soundbufferlen    $soundfreq)
    ]
]


togglevar = [
    set $arg1 (= $$arg1 0)
    if (= $$arg1 0) [echo $arg1 "OFF"] [echo $arg1 "ON"]
]
togglevarquiet = [set $arg1 (= $$arg1 0)]

